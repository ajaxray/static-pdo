<?php
require_once 'PHPUnit/Extensions/Database/TestCase.php';
require_once '../Db.php';

/**
 * Test class for Db.
 *
 * Generated by PHPUnit on 2009-08-20 at 00:24:07.
 */
class DbTest extends PHPUnit_Extensions_Database_TestCase
{
    protected $pdo;
    protected $_testFilesPath;
	
	// Authentication for testing with 
	private $_mySqlUser = 'root';
	private $_mySqlPass = '123456';
	private $_mySqlDb   = 'test';

    public function  __construct()
    {
        $this->_testFilesPath = dirname(__FILE__) . DIRECTORY_SEPARATOR . 'datasets/';
        $this->pdo = new PDO('sqlite:db');   
		$this->_createTable();
    }

    /**
     * @covers Db::setConnectionInfo
     * @covers Db::_connect
     */
    protected function setUp()
    {
        parent::setUp();
        Db::setConnectionInfo('db', null, null, 'sqlite');
    }

    protected function getConnection()
    {
        return $this->createDefaultDBConnection($this->pdo, 'sqlite');
    }

    protected function getDataSet()
    {
        return $this->createFlatXMLDataSet($this->_testFilesPath . 'users-seed.xml');
    }

    /**
     * @expectedException   PDOException
     */
    public function testQueryThrowsExceptionOnSyntaxError()
    {
        Db::execute('SELECT * FROM users)');
    }

    /**
     * @covers Db::execute
     */
    public function testExecuteCanPerformInsert()
    {
        $data = array('user'=>'abul', 'pass'=>'qqqq');
        Db::execute('INSERT INTO users(username, password) VALUES(:user, :pass)', $data);

        $xml_dataset = $this->createFlatXMLDataSet($this->_testFilesPath .'users-inserted.xml');
        $this->assertDataSetsEqual($xml_dataset, $this->getConnection()->createDataSet());
    }

    /**
     * @covers Db::execute
     * @depends testExecuteCanPerformInsert
     */
    public function testExecuteCanPerformUpdate()
    {
        $data = array('stat'=>'active', 'id'=>'2');

        Db::execute("UPDATE users SET status = :stat WHERE id = :id", $data);

        $xml_dataset = $this->createFlatXMLDataSet($this->_testFilesPath .'users-updated.xml');
        $this->assertDataSetsEqual($xml_dataset, $this->getConnection()->createDataSet());
    }

    /**
     * @covers Db::execute
     * @depends testExecuteCanPerformInsert
     */
    public function testExecuteCanPerformDelete()
    {
        Db::execute("DELETE FROM users WHERE id = 1");

        $data = Db::getValue('SELECT COUNT(id) FROM users');
        $this->assertEquals(1, $data);
    }

	/**
     * @covers Db::getLastInsertId
     */
    public function testGetlastinsertidReturnsCorrectId()
    {
        $data = array('user'=>'new', 'pass'=>'anything');
        Db::execute('INSERT INTO users(username, password) VALUES(:user, :pass)', $data);
		
		$lastId = Db::getLastInsertId();
        $this->assertEquals(3, $lastId);
    }
	
    /**
     * @covers Db::getValue
     */
    public function testGetvalueReturnsAFieldAsScalerValue()
    {
        $data =  Db::getValue('SELECT username FROM users WHERE id = ?', 2);
        $this->assertEquals('raju', $data);
    }

    /**
     * @covers Db::getRow
	 * @covers Db::_query
     */
    public function testGetrowReturnsSingleRowAsArray()
    {
        $data = Db::getRow('SELECT username, password FROM users WHERE id = 2');
        
        $expectedArray = array(
            'username'  =>'raju',
            'password'  =>'abcdef'
        );

        $this->assertEquals($expectedArray, $data);
    }

    /**
     * @covers Db::getRow
     */
    public function testGetrowReturnsFirstRowOfResultSet()
    {
        $data = Db::getRow('SELECT username, password FROM users');

        $expectedArray = array(
            'username'  =>'anis',
            'password'  =>'123456'
        );

        $this->assertEquals($expectedArray, $data);
    }

    /**
     * @covers Db::getResult
     */
    public function testGetresultReturnsResultSetAs2dArray()
    {
        $data =  Db::getResult('SELECT username, status FROM users');
        
        $expectedArray = array(
            array('username' =>'anis', 'status' =>'active'),
            array('username' =>'raju', 'status' =>'banned')
        );

        $this->assertEquals($expectedArray, $data);
    }

    /**
     * @covers Db::setFetchMode
     */
    public function testSetfetchmodeChangesFetchMode()
    {
        Db::setFetchMode(PDO::FETCH_NUM);
        
        $data =  Db::getRow('SELECT username, password FROM users');
        $expectedArray = array('anis', '123456');

        $this->assertEquals($expectedArray, $data);
		Db::setFetchMode(PDO::FETCH_ASSOC);
    }

	/**
     * @covers Db::setDriverOptions
     */
	public function testSetdriveroptionsWorks()
    {
        Db::setDriverOptions(array(PDO::ATTR_CASE => PDO::CASE_UPPER));
        
        $data =  Db::getRow('SELECT username FROM users where id = 1');

        $this->assertArrayHasKey('USERNAME', $data);
    }
		
	

    /**
     * @covers Db::getPDOObject
     */
    public function testGetPdoObjectReturnsPdoReference()
    {
        $newPDO = Db::getPDOObject();
        $newPDO->exec('DELETE FROM users WHERE id = 2');

        $remainingRows = Db::getValue('SELECT COUNT(*) FROM users');
        $this->assertEquals(1, $remainingRows);
    }
	
	/**
     * @covers Db::beginTransaction
     * @covers Db::rollbackTransaction
     */
	public function testRollbackTransectionWorks()
    {
        $data = array(
			array('user'=>'new', 'pass'=>'anything'),
			array('user'=>'old', 'pass'=>'something')
		);
        
		Db::beginTransaction();
		Db::execute('INSERT INTO users(username, password) VALUES(:user, :pass)', $data[0]);
		Db::execute('INSERT INTO users(username, password) VALUES(:user, :pass)', $data[1]);
		Db::rollbackTransaction();
		
		$xml_dataset = $this->createFlatXMLDataSet($this->_testFilesPath .'users-seed.xml');
        $this->assertDataSetsEqual($xml_dataset, $this->getConnection()->createDataSet());
    }
	
	/**
     * @covers Db::beginTransaction
     * @covers Db::commitTransaction
     */
	public function testCommitTransectionWorks()
    {
        $data = array('user'=>'abul', 'pass'=>'qqqq');
        
        
		Db::beginTransaction();
		Db::execute('INSERT INTO users(username, password) VALUES(:user, :pass)', $data);
		Db::commitTransaction();
		
		$xml_dataset = $this->createFlatXMLDataSet($this->_testFilesPath .'users-inserted.xml');
        $this->assertDataSetsEqual($xml_dataset, $this->getConnection()->createDataSet());
    }
	
	public function testWroksWithMysql()
	{
		Db::setConnectionInfo($this->_mySqlDb, $this->_mySqlUser, $this->_mySqlPass);
		$this->pdo = Db::getPDOObject();
		$this->_createMysqlTable();
		
		Db::execute('INSERT INTO users(username, password) VALUES(?, ?)', array('anis', '123456'));
		$data =  Db::getValue('SELECT username FROM users WHERE id = ?', Db::getLastInsertId());
		
        $this->assertEquals('anis', $data, 'Please set authentication to connect your MySql database');
	} 
	
	public function testWroksWithSqlite()
	{
		Db::setConnectionInfo(':memory:', null, null, 'sqlite');
		$this->pdo = Db::getPDOObject();
		$this->_createTable();
		
		Db::execute('INSERT INTO users(username, password) VALUES(?, ?)', array('anis', '123456'));
		$data =  Db::getValue('SELECT username FROM users WHERE id = ?', Db::getLastInsertId());
		
        $this->assertEquals('anis', $data);
	} 
	
	public function tearDown()
    {
        parent::tearDown();
        Db::execute('DELETE FROM users');
    }
	
	private function _createMysqlTable()
	{
		$query = "CREATE TABLE users(
			id INTEGER PRIMARY KEY AUTO_INCREMENT,
			username TEXT NOT NULL,
			password TEXT NOT NULL,
			status   TEXT
		);";
		
		$this->pdo->exec($query);
	}
	
	private function _createTable()
	{
		$query = "CREATE TABLE users(
			id INTEGER PRIMARY KEY,
			username TEXT NOT NULL,
			password TEXT NOT NULL,
			status   TEXT
		);";
		
		$this->pdo->exec($query);
	}
}
